{"version":3,"sources":["KeyboardOverlayActiveContext.js","App.js","serviceWorker.js","overlayInputTypes.js","eventAffectsKeyboardOverlay.js","KeyboardOverlayActiveProvider.jsx","onMobileBrowser.js","index.js"],"names":["createContext","App","React","useState","isInputFocused","setIsInputFocused","isOverlayKeyboardActive","useContext","KeyboardOverlayActiveContext","isNavigatorMobile","test","navigator","userAgent","className","toString","type","onBlur","onFocus","Boolean","window","location","hostname","match","eventAffectsKeyboardOverlay","event","target","tagName","toLowerCase","overlayInputTypes","includes","isContentEditable","KeyboardOverlayActiveProvider","children","isOnscreenKeyboardVisible","setIsOnscreenKeyboardVisible","isOnMobileBrowser","handleFocus","useCallback","handleBlur","Provider","value","onFocusCapture","undefined","onBlurCapture","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"sRAEeA,G,MAAAA,2BCgCAC,MA9Bf,WAAgB,IAAD,EAC+BC,IAAMC,UAAS,GAD9C,mBACNC,EADM,KACUC,EADV,KAEPC,EAA0BJ,IAAMK,WACpCC,GAWIC,EAAoB,OAAOC,KAAKC,UAAUC,WAEhD,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,4DAC+BP,EAAwBQ,YAEvD,kDAAwBV,EAAeU,YACvC,wDAA8BL,EAAkBK,YAChD,2BAAOC,KAAK,OAAOC,OAlBzB,WACEX,GAAkB,IAiByBY,QAd7C,WACEZ,GAAkB,SCHFa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DClBS,OACb,QACA,OACA,iBACA,QACA,OACA,QACA,SACA,WACA,SACA,MACA,OACA,MACA,QCXa,SAASC,EAA4BC,GAAQ,IAClDC,EAAWD,EAAXC,OAER,IAAKA,EACH,OAAO,EAGT,IAAMC,EAAUD,EAAOC,QAAQC,cACzBZ,EAAOU,EAAOV,KAAKY,cAEzB,IAAKD,EACH,OAAO,EAGT,OAAQA,GACN,IAAK,QACH,OAAOE,EAAkBC,SAASd,GAEpC,IAAK,WACH,OAAO,EAET,QACE,OAAOU,EAAOK,mBCoBLC,MAlCf,YAAsD,IAAbC,EAAY,EAAZA,SAAY,EAI/C9B,IAAMC,UAAS,GAJgC,mBAEjD8B,EAFiD,KAGjDC,EAHiD,KAM7CC,ECfC,OAAOzB,KAAKC,UAAUC,YAAc,iBAAkBO,ODiBvDiB,EAAclC,IAAMmC,aAAY,SAAAb,GAChCD,EAA4BC,IAC9BU,GAA6B,KAE9B,IAEGI,EAAapC,IAAMmC,aAAY,SAAAb,GAC/BD,EAA4BC,IAC9BU,GAA6B,KAE9B,IAEH,OACE,kBAAC1B,EAA6B+B,SAA9B,CAAuCC,MAAOP,GAC5C,yBACEQ,eAAgBN,EAAoBC,OAAcM,EAClDC,cAAeR,EAAoBG,OAAaI,GAE/CV,KEvBTY,IAASC,OAAO,mBANI,kBAClB,kBAAC,EAAD,KACE,kBAAC,EAAD,SAIY,MAAiBC,SAASC,eAAe,SLoHnD,kBAAmBpC,WACrBA,UAAUqC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.52e4bb39.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nexport default createContext();\n","import React from \"react\";\nimport \"./App.css\";\nimport KeyboardOverlayActiveContext from \"./KeyboardOverlayActiveContext\";\n\nfunction App() {\n  const [isInputFocused, setIsInputFocused] = React.useState(false);\n  const isOverlayKeyboardActive = React.useContext(\n    KeyboardOverlayActiveContext\n  );\n\n  function handleBlur() {\n    setIsInputFocused(false);\n  }\n\n  function handleFocus() {\n    setIsInputFocused(true);\n  }\n\n  const isNavigatorMobile = /Mobi/.test(navigator.userAgent);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>\n          Is overlay keyboard active? {isOverlayKeyboardActive.toString()}\n        </div>\n        <div>Is input focused? {isInputFocused.toString()}</div>\n        <div>Navigator looks mobile? {isNavigatorMobile.toString()}</div>\n        <input type=\"text\" onBlur={handleBlur} onFocus={handleFocus} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export default [\n  \"color\",\n  \"date\",\n  \"datetime-local\",\n  \"email\",\n  \"file\",\n  \"month\",\n  \"number\",\n  \"password\",\n  \"search\",\n  \"tel\",\n  \"text\",\n  \"url\",\n  \"week\"\n];\n","import overlayInputTypes from \"./overlayInputTypes\";\n\nexport default function eventAffectsKeyboardOverlay(event) {\n  const { target } = event;\n\n  if (!target) {\n    return false;\n  }\n\n  const tagName = target.tagName.toLowerCase();\n  const type = target.type.toLowerCase();\n\n  if (!tagName) {\n    return false;\n  }\n\n  switch (tagName) {\n    case \"input\": {\n      return overlayInputTypes.includes(type);\n    }\n    case \"textarea\": {\n      return true;\n    }\n    default: {\n      return target.isContentEditable;\n    }\n  }\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport KeyboardOverlayActiveContext from \"./KeyboardOverlayActiveContext\";\nimport onMobileBrowser from \"./onMobileBrowser\";\nimport eventAffectsKeyboardOverlay from \"./eventAffectsKeyboardOverlay\";\n\nconst propTypes = {\n  children: PropTypes.node.isRequired\n};\n\nfunction KeyboardOverlayActiveProvider({ children }) {\n  const [\n    isOnscreenKeyboardVisible,\n    setIsOnscreenKeyboardVisible\n  ] = React.useState(false);\n\n  const isOnMobileBrowser = onMobileBrowser();\n\n  const handleFocus = React.useCallback(event => {\n    if (eventAffectsKeyboardOverlay(event)) {\n      setIsOnscreenKeyboardVisible(true);\n    }\n  }, []);\n\n  const handleBlur = React.useCallback(event => {\n    if (eventAffectsKeyboardOverlay(event)) {\n      setIsOnscreenKeyboardVisible(false);\n    }\n  }, []);\n\n  return (\n    <KeyboardOverlayActiveContext.Provider value={isOnscreenKeyboardVisible}>\n      <div\n        onFocusCapture={isOnMobileBrowser ? handleFocus : undefined}\n        onBlurCapture={isOnMobileBrowser ? handleBlur : undefined}\n      >\n        {children}\n      </div>\n    </KeyboardOverlayActiveContext.Provider>\n  );\n}\n\nKeyboardOverlayActiveProvider.propTypes = propTypes;\n\nexport default KeyboardOverlayActiveProvider;\n","export default function onMobileBrowser() {\n  return /Mobi/.test(navigator.userAgent) && \"ontouchstart\" in window;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport KeyboardOverlayActiveProvider from \"./KeyboardOverlayActiveProvider\";\n\nconst RenderedApp = () => (\n  <KeyboardOverlayActiveProvider>\n    <App />\n  </KeyboardOverlayActiveProvider>\n);\n\nReactDOM.render(<RenderedApp />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}